## #! /bin/sh
## AUTHOR: Robert Twyman
## AUTHOR: Kris Thielemans
## Copyright (C) 2020 University College London
## Licensed under the Apache License, Version 2.0

## Script is used to compute the normalisation factors for GATE data reconstruction.
## The current standard to do this is to forward project, in STIR and GATE (run simulations), a cylindrical activity, the size of the scanner FOV, without attenuation.
## The MeasuredData (sinogram) is obtained by unlisting the GATE output with the exclusion of randoms and scatter.

## Span: This should be an positive integer that saves an additional sinogram with the indicated span. 
## If no span changes is wanted, please input 1.

## This script forward projects the same activity cylinder in SITR to obtain model_data. 
## The script will estimate the norm factors (norm_sino.hs) using STIR functionality. 
## See find_ML_normfactors3D and apply_normfactors3D for more information

## PARAMETERS

if [ $# -lt 4 ]; then
	echo "Usage: EstimateGATESTIRNorm.sh OutputFilename MeasuredData FOVCylindricalActivityVolumeFilename [ norm_template ]"
	exit 1
fi 

set -e # exit on error
trap "echo ERROR in $0" ERR

OutputFilename=$1
MeasuredData=$2
FOVCylindricalActivityVolumeFilename=$3

if [ $# > 4 ]; then
	## Optional template norm
	norm_template=$4
else
	norm_template=0
fi


## ML Normfactors loop numbers (Hardcoded for now)
outer_iters=5
eff_iters=6

## factors are the norm_filename_prefix generated by find_ML_normfactors3D and input for apply_normfactors3D
factors=norm_factors
eff_factors="eff_factors"

## Create the STIR (model) forward projection of the object.
model_data=STIR_forward.hs


## Forward project using SITR to get model data
echo "Forward projecting (${FOVCylindricalActivityVolumeFilename}) with STIR to get model_data"
forward_project $model_data $FOVCylindricalActivityVolumeFilename $MeasuredData > /dev/null 2>&1
echo "stir_math to create sino of ones"
stir_math -s --including-first --times-scalar 0 --add-scalar 1 ones.hs $model_data


## find ML normfactors
echo "find_ML_normfactors3D"
find_ML_normfactors3D $factors $MeasuredData $model_data $outer_iters $eff_iters


## mutiply ones with the norm factors to get a sino
echo "apply_normfactors3D"
apply_normfactors3D $eff_factors $factors ones.hs 1 $outer_iters $eff_iters

## Creates the span-1 normalisation sinogram
echo "inverting the eff_factors to get norm"
stir_math -s --including-first --power -1 $OutputFilename $eff_factors".hs"
echo "Norm factors are saved as: $OutputFilename"

## Creates the span-n normalisation sinogram if $span > 1
if [ ${norm_template} != 0 ]; then
	TemplatedOutputFilename=${OutputFilename}"_templated"
	echo "SSRB the eff_factors ("${eff_factors}") to match the dimentions of '${norm_template}'"
	SSRB --template ${norm_template} ${eff_factors}"_templated" ${eff_factors}".hs" 0
	stir_math -s --including-first --power -1 $TemplatedOutputFilename ${eff_factors}"_templated.hs"
	echo "Compressed norm factors are saved as: ${TemplatedOutputFilename}"
fi

rm ones.hs
rm ones.s

exit 0
